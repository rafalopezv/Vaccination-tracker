library(tidyverse)
library(lubridate)
library(reactable)
library(magrittr)
library(kableExtra)

source("funciones.R")

df_base <- rio::import("output/base_datos_lf.xlsx") # Cargamos Base de datos general
desemb <- rio::import("output/desembolsos.xlsx") # cargamos base desembolsos

# Base con lista de MFIs y paises respectivos
country_b <- rio::import("output/lista_mfis.xlsx") 

df_sociales <- rio::import("output/datos_sociales.xlsx")



#------
# Replica de Tablas
#------


# Definimos los parametros a
a <- 2020 # año
b <- 9 # mes


#-----
# Hoja: LOCFUND II (Page I)
#------

### FUND FACTS

# Llamamos funcion para generar data frame FUND FACTS
ff <- fund_facts(a,m,d_c)  #ingresamos: gestion, mes, debt commit

# Exportamos Fund Facts en excel
ff %>% rio::export("output/tablas/hoja1_fund_facts.xlsx")

# Creamos tabla 
ff_table <- ff %>%
  kbl(caption = "FUND FACTS (USD)") %>%
  kable_styling("striped") %>%
  kable_classic(full_width = F, html_font = "Open Sans")




### PORTFOLIO PERFORMANCE INDICATORS

# Llamamos la funcion para generar data frame de PORTFOLIO PERF IND
ppi <- port_perf_ind(a,m)

# Exportamos la base en Excel
ppi %>% rio::export("output/tablas/hoja1_portfolio_performance_indicator.xlsx")

# Creamos la tabla
ppi_table <- ppi %>%
  kbl(caption = "FUND FACTS (USD)") %>%
  kable_styling("striped") %>%
  kable_classic(full_width = F, html_font = "Open Sans")
  

## SOCIAL INDICATORS


# filtramos la fecha más alta de cada MFI

tbl_social <- base_sociales(a,b)



tbl_social %>% 
  summarise(`Total Number of Clients` = round(sum(number_of_clients),2),
            # `Female Clients (%)` = round(mean(female_clients_percent)*100,2),
            `Female Clients (%)` = round((sum(female_clients)/sum(number_of_clients))*100,2),
            # `Clients in Rural Areas (%)` = round(mean(rural_clients_percent)*100,2),
            `Clients in Rural Areas (%)` = round((sum(rural_clients)/sum(number_of_clients))*100,2),
            `Avg. Loan Size` = round(mean(average_loan_usd),2)) %>% 
  gather(Indicators, Values) %>% 
  kbl(caption = "SOCIAL INDICATORS", format.args = list(big.mark = ",")) %>% 
  kable_styling("striped") %>%
  kable_classic(full_width = F, html_font = "Open Sans")





##----
#HOJA LOCFUND EEFF Summary / LOCFUND II (Page II)
##---

## FINANCIAL INDICATORS

## BALANCE SHEET SUMMARY

# LLamamos la funcion para generar data frame de balance sheet
df_bs <- balance_sheet_sumary(a,m)


# Creamos Tabla Blance Sheet
tbl_bs <- reactable(
  df_bs,
  filterable = TRUE,
  bordered = TRUE,
  striped = TRUE,
  highlight = TRUE,
  # defaultPageSize = 15,
  # resizable = TRUE,
  theme = reactableTheme(
    borderColor = "#dfe2e5",
    stripedColor = "#f6f8fa",
    highlightColor = "#f0f5f9",
    cellPadding = "8px 12px",
    style = list(fontFamily = "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif")
  ),
  groupBy = c("tipo", "nivel1"),
  columns = list(
    tipo = colDef(name = "BALANCE SHEET USD",
                  minWidth = 75),
    nivel1 = colDef(name = "Groups",
                    minWidth = 75),
    nivel2 = colDef(name = "Sub-Group",
                    minWidth = 75),
    total = colDef(name = "USD",
                   aggregate = "sum",
                   format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                   minWidth = 75)
  )
  
)




## PROFIT/lOSS SUMMARY

# Llamamos funcion para generar data frame Profit/Loss
df_pl <- profit_loss_summary(a,m)


# Creamos tabla profit loss  con independientes y acumulados
tbl_pl <- reactable(
  # as.data.frame(df_pl) %>% select(-tipo),
  df_pl,
  filterable = TRUE,
  bordered = TRUE,
  striped = TRUE,
  highlight = TRUE,
  # defaultPageSize = 15,
  # resizable = TRUE,
  theme = reactableTheme(
    borderColor = "#dfe2e5",
    stripedColor = "#f6f8fa",
    highlightColor = "#f0f5f9",
    cellPadding = "8px 12px",
    style = list(fontFamily = "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif")
  ),
  groupBy = c("nivel1"),
  columns = list(
    # tipo = colDef(name = "PROFIN/ LOSS USD",
    #               minWidth = 75),
    nivel1 = colDef(name = "PROFIT/ LOSS USD",
                    minWidth = 75),
    nivel2 = colDef(name = "Sub-Group",
                    minWidth = 75),
    total = colDef(name = "USD",
                   aggregate = "sum",
                   format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                   minWidth = 75),
    acumulado = colDef(name = "Cummulative USD",
                       aggregate = "sum",
                       format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                       minWidth = 75)
  )
  
)


### OUR TEAM

our_team <- data.frame(Position = c( "General Manager",
                                     "Director, Latin America and the Caribbean", 
                                     "TSF Director", 
                                     "Capital Markets Officer", 
                                     "Credit Officer",  
                                     "Credit Officer",  
                                     "Leading Consultant - TSF"),
                       Name = c( "Fernando Sanchez", 
                                 "Cesar Castillo",  
                                 "Verónica Céspedes", 
                                 "Veronica Zamora", 
                                 "Mauricio Rodriguez", 
                                 "Rolando Pereira", 
                                 "Pedro Fardella"),
                       `e-mail` = c( "fsanchez@locfund.com", 
                                     "ccastillo@locfund.com", 
                                     "vcespedes@locfund.com", 
                                     "vzamora@locfund.com", 
                                     "mrodriguez@locfund.com", 
                                     "rpereira@bim-bfm.com", 
                                     "pfardella@locfund.com")
                       )
tbl_our_team <- our_team %>% 
  kbl(caption = "OUR TEAM") %>%
  kable_styling("striped") %>%
  kable_classic(full_width = F, html_font = "Open Sans")
  

##----
#HOJA LOCFUND II (Page III) 
##---

## DEVELOPMENT GOALS
tbl_social <- base_sociales(a,b)

data.frame(Clients  = c("Total number of clients", 
                        "Female clients (%)", 
                        "Rural Clients (%)", 
                        "Average loan size (c)", 
                        "Total clients reached by LOCFUND II financing",
                        "Avg. loan size/GDP per capita (d)",
                        "Write-offs (%)"),
           Current = c(round(sum(tbl_social$number_of_clients),2),
                       round((sum(tbl_social$female_clients)/sum(tbl_social$number_of_clients))*100,2),
                       round((sum(tbl_social$rural_clients)/sum(tbl_social$number_of_clients))*100,2),
                       1355.42,
                       204198.85,
                       90,
                       round(mean(tbl_social$write_offs_percent*100),2)
                       ),
           Goal = c("Not Applicable",
                    ">= 50%",
                    ">= 35%",
                    "<= 1,200",
                    ">= 85,000",
                    ">= 50%",
                    "<= 3%"),
           Deadline = c("Not Applicable",
                        "Year 6",
                        "Year 6",
                        "Year 4",
                        "Year 8",
                        "Year 6",
                        "Year 6"),
           Status = c("Not Applicable",
                      ifelse(round((sum(tbl_social$female_clients)/sum(tbl_social$number_of_clients))*100,2)>50, "Compliant", "In process"),
                      ifelse(round((sum(tbl_social$rural_clients)/sum(tbl_social$number_of_clients))*100,2)>35, "Compliant", "In process"),
                      ifelse(1355.42 <= 1200,"Compliant", "In process"),
                      ifelse(204198.85 <= 85000,"Compliant", "In process"),
                      ifelse(90 >= 50,"Compliant", "In process"),
                      ifelse(round(mean(tbl_social$write_offs_percent*100),2)<=0.03,"Compliant", "In process"))) %>% 
  kbl(caption = "", format.args = list(big.mark = ",")) %>%
  kable_styling("striped") %>%
  kable_classic(full_width = F, html_font = "Open Sans")




## CONTROL CALIDAD
# SOCIAL INDICATORS en base de datos general

# revision general creamos lista con MFIs de toda la base geneal
temp <- df_base %>% filter(tipo == "ASSETS", !is.na(entidad)) %>% 
  select(entidad) %>% unique() %>% 
  left_join(country_b %>% select(entity_hom, entidad = entity), by = "entidad") 


# detectar que mfis de base sociales no estan en base general
unique(df_sociales$mfis2)[!unique(df_sociales$mfis2) %in% temp$entity_hom]

# detectar que mfis de base general no estan en base sociales
unique(temp$entity_hom)[!unique(temp$entity_hom) %in% df_sociales$mfis2]


## SOCIAL PERFORMANCE
# Llamamos la funcion para generar la tabla social correspondiente

tbl_social <- base_sociales(a,b)



social_table <- reactable(
  tbl_social,
  filterable = TRUE, 
  bordered = TRUE, 
  striped = TRUE, 
  highlight = TRUE, 
  defaultPageSize = 15,
  resizable = TRUE, 
  # wrap = FALSE,
  theme = reactableTheme(
    borderColor = "#dfe2e5",
    stripedColor = "#f6f8fa",
    highlightColor = "#f0f5f9",
    cellPadding = "8px 12px",
    style = list(fontFamily = "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif")
  ),
  groupBy = c("country"),
  columns = list(
    country = colDef(name = "Country",
                     minWidth = 150),
    nombre_mfi = colDef(name = "MFIs",
                        aggregate = "unique",
                        footer = "Total",
                        minWidth = 150),
    data_as_of = colDef(name = "Data as of",
                        format = colFormat(date = TRUE)),
    # format = list(
    #   cell = colFormat(date = TRUE),
    #   aggregated = colFormat(suffix = " dates"))),
    loan_portfolio_usd_mm = colDef(name = "Loan Portfolio (USD MM)",
                                   aggregate = "sum",
                                   format = colFormat(suffix = " MM", separators = TRUE),
                                   footer = function(values) sprintf("%.2f", sum(values)),
                                   minWidth = 150),
    number_of_clients = colDef(name = "Number of Clients",
                               aggregate = "sum",
                               footer = function(values) sprintf("%.0f", sum(values)),
                               format = colFormat(separators = TRUE)),
    female_clients_percent = colDef(name = "Female clients (%)",
                                    aggregate = "mean",
                                    format = colFormat(percent = TRUE, digits = 1)),
    rural_clients_percent = colDef(name = "Rural clients (%)",
                                   aggregate = "mean",
                                   format = colFormat(percent = TRUE, digits = 1)),
    average_loan_usd = colDef(name = "Average loan (USD)",
                              aggregate = "mean",
                              format = colFormat(separators = TRUE, digits = 2)),
    average_loan_gdp_per_capita = colDef(name = "Average loan/GDP per Capita",
                                         format = colFormat(percent = TRUE, digits = 1)),
    write_offs_percent = colDef(name = "Writeoffs (%)",
                                format = colFormat(percent = TRUE, digits = 1)),
    endorsed_to_the_smart_campaign = colDef(name = "Endorsed to the Smart Campaign"),
    ppi_users_k = colDef(name = "PPI Users (k)"),
    social_rating = colDef(name = "Social Rating"),
    social_rating_report_year = colDef(name = "Social Rating Report Year"),
    unique_clients = colDef(name = "Unique Clients"),
    banked_or_first_clients = colDef(name = "Banked of First Clients")
  ),
  defaultColDef = colDef(footerStyle = list(fontWeight = "bold"))
)


social_table





df_imf <- df_base %>% filter(gestion == a, mes == b, !is.na(entidad), tipo == "ASSETS") %>%
  mutate(entidad = str_to_upper(entidad)) %>% 
  left_join(country_b %>% 
              rename(entidad = entity) %>% 
              mutate(entidad = str_to_upper(entidad),
                     entity_hom = str_to_upper(entity_hom)), by = "entidad") %>% 
  filter(crudo %in% c("Principal", "Accrued Interests")) %>% 
  distinct() %>% 
  spread(crudo, valor) %>% 
  select(country, entity_hom,  entidad, principal = Principal, accrued_interest = `Accrued Interests`) %>% 
  mutate(total = principal + accrued_interest) %>% 
  arrange(country)

df_imf %>% group_by(country) %>% 
  summarise(portfolio = sum(total))



##----
#HOJA LOCFUND II (Page IV) 
##---

## FINANCIAL STATEMENTS


# ASSETS  (ES EL MISMO CODIGO PARA EQUITY, LIABILITY)
df_fs <-  df_base_horizontal(a)

# Adjuntamos Meses vacios en caso de faltar
nombres_meses <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
temp <- nombres_meses[!nombres_meses %in% colnames(df_fs)]
df <- data.frame(matrix(ncol = length(temp), nrow = 1))
colnames(df) <- temp
df$tipo <- NA
df_fs <- left_join(df_fs, df)



df_fs_assets <- df_fs %>% filter(tipo == "ASSETS") %>% 
  select(tipo, nivel1, nivel2, entidad, crudo, 
         January, February, March, April, May, June, July, August, September, October, November, December)

df_fs_assets$tipo <- "Total Assets"

sticky_style <- list(position = "sticky", left = 0, background = "#fff", zIndex = 1,
                     borderRight = "1px solid #eee")


tbl_fs_assets <-  reactable(
  df_fs_assets,
  filterable = TRUE,
  bordered = TRUE,
  striped = TRUE,
  highlight = TRUE,
  # defaultPageSize = 15,
  # resizable = TRUE,
  theme = reactableTheme(
    borderColor = "#dfe2e5",
    stripedColor = "#f6f8fa",
    highlightColor = "#f0f5f9",
    cellPadding = "8px 12px",
    style = list(fontFamily = "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif")
  ),
  groupBy = c("tipo","nivel1","nivel2","entidad"),
  columns = list(
    tipo = colDef(name = "BALANCE SHEET",
                  minWidth = 100),
    nivel1 = colDef(name = "Main Group",
                    minWidth = 100,
                    style = sticky_style,
                    headerStyle = sticky_style),
    nivel2 = colDef(name = "Sub-Group",
                    minWidth = 100),
    entidad = colDef(name = "Name",
                     minWidth = 100),
    crudo = colDef(name = "Indicator",
                   minWidth = 100),
    January = colDef(name = "January",
                     aggregate = "sum",
                     format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                     minWidth = 100),
    February = colDef(name = "February",
                      aggregate = "sum",
                      format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                      minWidth = 100),
    March = colDef(name = "March",
                   aggregate = "sum",
                   format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                   minWidth = 100),
    April = colDef(name = "April",
                   aggregate = "sum",
                   format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                   minWidth = 100),
    May = colDef(name = "May",
                 aggregate = "sum",
                 format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                 minWidth = 100),
    June = colDef(name = "June",
                  aggregate = "sum",
                  format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                  minWidth = 100),
    July = colDef(name = "July",
                  aggregate = "sum",
                  format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                  minWidth = 100),
    August = colDef(name = "August",
                    aggregate = "sum",
                    format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                    minWidth = 100),
    September = colDef(name = "September",
                       aggregate = "sum",
                       format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                       minWidth = 100),
    October = colDef(name = "October",
                     aggregate = "sum",
                     format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                     minWidth = 100),
    November = colDef(name = "November",
                      aggregate = "sum",
                      format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                      minWidth = 100),
    December = colDef(name = "December",
                      aggregate = "sum",
                      format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                      minWidth = 100)
  )
  
)


## TOTALS (RESUMEN DE TOTALES BALANCE SHEET  INCLUIDO total liabilities and equity)


df_total <- rbind(df_base %>% filter(gestion == a ,tipo %in% c("ASSETS", "EQUITY", "LIABILITIES")) %>% 
                    group_by(tipo, mes) %>% 
                    summarise(total = sum(valor, na.rm = TRUE)), # hasta este punto adjuntamos por tipo
                  df_base %>% filter(gestion == a ,tipo %in% c("EQUITY", "LIABILITIES")) %>% # a partir de aqui creamos LIAB + EQUITY
                    group_by(mes) %>% 
                    summarise(total = sum(valor, na.rm = TRUE)) %>% 
                    mutate(tipo = "LIABILITIES AND EQUITY")) %>% 
  mutate(mes = case_when(mes == 1 ~ "January",
                         mes == 2 ~ "February",
                         mes == 3 ~ "March",
                         mes == 4 ~ "April",
                         mes == 5 ~ "May",
                         mes == 6 ~ "June",
                         mes == 7 ~ "July",
                         mes == 8 ~ "August",
                         mes == 9 ~ "September",
                         mes == 10 ~ "October",
                         mes == 11 ~ "November",
                         mes == 12 ~ "December")) %>% 
  spread(mes, total) %>%  
  filter(tipo %in% c("ASSETS", "EQUITY", "LIABILITIES", "LIABILITIES AND EQUITY")) %>% 
  select(tipo, 
         January, February, March, April, May, June, July, August, September, October, November, December) %>% 
  mutate(tipo = case_when(tipo == "ASSETS" ~ "Total Assets",
                          tipo == "EQUITY" ~ "Total Equity",
                          tipo == "LIABILITIES" ~ "Total Liabilities",
                          tipo == "LIABILITIES AND EQUITY" ~ "Total Liabilities and Equity"))




reactable(
  df_total,
  # filterable = TRUE,
  bordered = TRUE,
  striped = TRUE,
  highlight = TRUE,
  # defaultPageSize = 15,
  # resizable = TRUE,
  theme = reactableTheme(
    borderColor = "#dfe2e5",
    stripedColor = "#f6f8fa",
    highlightColor = "#f0f5f9",
    cellPadding = "8px 12px",
    style = list(fontFamily = "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif")
  ),
  # groupBy = c("tipo","nivel1","nivel2","entidad"),
  columns = list(
    tipo = colDef(name = "BALANCE SHEET",
                  minWidth = 100),
    # nivel1 = colDef(name = "Main Group",
    #                 minWidth = 100,
    #                 style = sticky_style,
    #                 headerStyle = sticky_style),
    # nivel2 = colDef(name = "Sub-Group",
    #                 minWidth = 100),
    # entidad = colDef(name = "Name",
    #                  minWidth = 100),
    # crudo = colDef(name = "Indicator",
    #                minWidth = 100),
    January = colDef(name = "January",
                     # aggregate = "sum",
                     format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                     minWidth = 100),
    February = colDef(name = "February",
                      # aggregate = "sum",
                      format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                      minWidth = 100),
    March = colDef(name = "March",
                   # aggregate = "sum",
                   format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                   minWidth = 100),
    April = colDef(name = "April",
                   # aggregate = "sum",
                   format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                   minWidth = 100),
    May = colDef(name = "May",
                 # aggregate = "sum",
                 format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                 minWidth = 100),
    June = colDef(name = "June",
                  # aggregate = "sum",
                  format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                  minWidth = 100),
    July = colDef(name = "July",
                  # aggregate = "sum",
                  format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                  minWidth = 100),
    August = colDef(name = "August",
                    # aggregate = "sum",
                    format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                    minWidth = 100),
    September = colDef(name = "September",
                       # aggregate = "sum",
                       format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                       minWidth = 100),
    October = colDef(name = "October",
                     # aggregate = "sum",
                     format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                     minWidth = 100),
    November = colDef(name = "November",
                      # aggregate = "sum",
                      format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                      minWidth = 100),
    December = colDef(name = "December",
                      # aggregate = "sum",
                      format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                      minWidth = 100)
  )
  
)



## MONTHLY PROFIT/LOSS  (USD)

df_fs <-  df_base_horizontal(a)

# Adjuntamos Meses vacios en caso de faltar
nombres_meses <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
temp <- nombres_meses[!nombres_meses %in% colnames(df_fs)]
df <- data.frame(matrix(ncol = length(temp), nrow = 1))
colnames(df) <- temp
df$tipo <- NA
df_fs <- left_join(df_fs, df)


df_results <- df_fs %>% filter(tipo == "PROFIT/(LOSS)") %>% 
  select(nivel1, nivel2, entidad, crudo, 
         January, February, March, April, May, June, July, August, September, October, November, December) %>% 
  mutate(nivel1 = case_when(nivel1 == "INCOME" ~ "Total Income",
                            nivel1 == "EXPENSES" ~ "Total Expenses",
                            TRUE ~ nivel1))

df_results <- df_results[order(match(df_results$nivel1, c("Total Income", "Total Expenses"))),]  


sticky_style <- list(position = "sticky", left = 0, background = "#fff", zIndex = 1,
                     borderRight = "1px solid #eee")


tbl_results <- reactable(
  df_results,
  filterable = TRUE,
  bordered = TRUE,
  striped = TRUE,
  highlight = TRUE,
  # defaultPageSize = 15,
  # resizable = TRUE,
  theme = reactableTheme(
    borderColor = "#dfe2e5",
    stripedColor = "#f6f8fa",
    highlightColor = "#f0f5f9",
    cellPadding = "8px 12px",
    style = list(fontFamily = "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif")
  ),
  groupBy = c("nivel1","nivel2","entidad"),
  columns = list(
    # tipo = colDef(name = "PROFIT/LOSS",
    #               minWidth = 100),
    nivel1 = colDef(name = "Main Group",
                    minWidth = 100,
                    style = sticky_style,
                    headerStyle = sticky_style),
    nivel2 = colDef(name = "Sub-Group",
                    minWidth = 100),
    entidad = colDef(name = "Name",
                     minWidth = 100),
    crudo = colDef(name = "Indicator",
                   minWidth = 100),
    January = colDef(name = "January",
                     aggregate = "sum",
                     format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                     minWidth = 100),
    February = colDef(name = "February",
                      aggregate = "sum",
                      format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                      minWidth = 100),
    March = colDef(name = "March",
                   aggregate = "sum",
                   format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                   minWidth = 100),
    April = colDef(name = "April",
                   aggregate = "sum",
                   format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                   minWidth = 100),
    May = colDef(name = "May",
                 aggregate = "sum",
                 format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                 minWidth = 100),
    June = colDef(name = "June",
                  aggregate = "sum",
                  format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                  minWidth = 100),
    July = colDef(name = "July",
                  aggregate = "sum",
                  format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                  minWidth = 100),
    August = colDef(name = "August",
                    aggregate = "sum",
                    format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                    minWidth = 100),
    September = colDef(name = "September",
                       aggregate = "sum",
                       format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                       minWidth = 100),
    October = colDef(name = "October",
                     aggregate = "sum",
                     format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                     minWidth = 100),
    November = colDef(name = "November",
                      aggregate = "sum",
                      format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                      minWidth = 100),
    December = colDef(name = "December",
                      aggregate = "sum",
                      format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                      minWidth = 100)
  )
  
)


# TOTAL PROFIT/LOSS  (TOTALES +  PROFITL LOSS before, after provisions and FX)


df_results_after <- rbind(df_base %>% filter(gestion == a) %>% 
        filter(tipo %in% c("PROFIT/(LOSS)")) %>% 
        filter(nivel1 %in% c("INCOME", "EXPENSES")) %>% 
        group_by(nivel1, mes) %>% 
        summarise(valor = sum(valor, na.rm = TRUE)) %>% 
        rename(tipo = nivel1),
      df_base %>% filter(gestion == a) %>% 
        filter(tipo %in% c("PROFIT / LOSS before provisions", "PROFIT / LOSS after provisions",
                           "PROFIT / LOSS after FX")) %>% 
        select(-gestion,-nivel1, -nivel2, -entidad, -crudo)) %>%
  mutate(mes = case_when(mes == 1 ~ "January",
                         mes == 2 ~ "February",
                         mes == 3 ~ "March",
                         mes == 4 ~ "April",
                         mes == 5 ~ "May",
                         mes == 6 ~ "June",
                         mes == 7 ~ "July",
                         mes == 8 ~ "August",
                         mes == 9 ~ "September",
                         mes == 10 ~ "October",
                         mes == 11 ~ "November",
                         mes == 12 ~ "December")) %>% 
  spread(mes, valor) %>% 
  mutate(tipo = case_when(tipo == "INCOME" ~ "Total Income",
                          tipo == "EXPENSES" ~ "Total Expenses",
                          TRUE ~ tipo))
  

df_results_after <- df_results_after[order(match(df_results_after$tipo, c("Total Income", "Total Expenses", "PROFIT / LOSS before provisions", "PROFIT / LOSS after provisions",
                                                                          "PROFIT / LOSS after FX"))),]  

sticky_style <- list(position = "sticky", left = 0, background = "#fff", zIndex = 1,
                     borderRight = "1px solid #eee")


tbl_results_after <- reactable(
  df_results_after,
  # filterable = TRUE,
  bordered = TRUE,
  striped = TRUE,
  highlight = TRUE,
  # defaultPageSize = 15,
  # resizable = TRUE,
  theme = reactableTheme(
    borderColor = "#dfe2e5",
    stripedColor = "#f6f8fa",
    highlightColor = "#f0f5f9",
    cellPadding = "8px 12px",
    style = list(fontFamily = "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif")
  ),
  columns = list(
    tipo = colDef(name = "PROFIT/LOSS",
                  minWidth = 100,
                  style = sticky_style,
                  headerStyle = sticky_style),
    January = colDef(name = "January",
                     aggregate = "sum",
                     format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                     minWidth = 100),
    February = colDef(name = "February",
                      aggregate = "sum",
                      format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                      minWidth = 100),
    March = colDef(name = "March",
                   aggregate = "sum",
                   format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                   minWidth = 100),
    April = colDef(name = "April",
                   aggregate = "sum",
                   format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                   minWidth = 100),
    May = colDef(name = "May",
                 aggregate = "sum",
                 format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                 minWidth = 100),
    June = colDef(name = "June",
                  aggregate = "sum",
                  format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                  minWidth = 100),
    July = colDef(name = "July",
                  aggregate = "sum",
                  format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                  minWidth = 100),
    August = colDef(name = "August",
                    aggregate = "sum",
                    format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                    minWidth = 100),
    September = colDef(name = "September",
                       aggregate = "sum",
                       format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                       minWidth = 100),
    October = colDef(name = "October",
                     aggregate = "sum",
                     format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                     minWidth = 100),
    November = colDef(name = "November",
                      aggregate = "sum",
                      format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                      minWidth = 100),
    December = colDef(name = "December",
                      aggregate = "sum",
                      format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                      minWidth = 100)
  )
  
)




##----
#HOJA LOCFUND II (Page V) 
##---

## COUNTRY ANALYSIS



# ENTIDADES INEXISTENTES EN Base: Copia de MIFs_served.xlsx
df_base %>% filter(gestion == a, mes == b, !is.na(entidad) , tipo == "ASSETS") %>%
  mutate(entidad = str_to_upper(entidad)) %>% 
  left_join(country_b %>% 
              rename(entidad = entity) %>% 
              mutate(entidad = str_to_upper(entidad)), by = "entidad") %>% 
  filter(crudo %in% c("Principal", "Accrued Interests")) %>% filter(is.na(country)) %>% 
  pull(entidad) %>% unique()



## Tabla Country Analysis

# llamamos funcion para generar base de paieses según parametros

df_imf <- country_analysis(a,b)


tbl_imf <- reactable(
  df_imf,
  filterable = TRUE,
  bordered = TRUE,
  striped = TRUE,
  highlight = TRUE,
  # defaultPageSize = 15,
  # resizable = TRUE,
  theme = reactableTheme(
    borderColor = "#dfe2e5",
    stripedColor = "#f6f8fa",
    highlightColor = "#f0f5f9",
    cellPadding = "8px 12px",
    style = list(fontFamily = "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif")
  ),
  groupBy = c("country", "entity_hom"),
  columns = list(
    country = colDef(name = "COUNTRY",
                    minWidth = 75),
    entity_hom = colDef(name = "ENTITY",
                    minWidth = 75),
    entidad = colDef(name = "OPERATIONS",
                        minWidth = 75),
    principal = colDef(name = "PRINCIPAL",
                   aggregate = "sum",
                   format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                   minWidth = 75),
    accrued_interest = colDef(name = "ACCRUED INTERESTS",
                       aggregate = "sum",
                       format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                       minWidth = 75),
    total = colDef(name = "TOTAL",
                   aggregate = "sum",
                   format = colFormat(currency = "USD", separators = TRUE ,digits = 2),
                   minWidth = 75)
  )
  
)
